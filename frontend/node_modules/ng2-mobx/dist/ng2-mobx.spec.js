"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
const platform_browser_1 = require("@angular/platform-browser");
const core_1 = require("@angular/core");
const testing_1 = require("@angular/core/testing");
const testing_2 = require("@angular/platform-browser-dynamic/testing");
const mobx_1 = require("mobx");
const ng2_mobx_1 = require("./ng2-mobx");
// import {
//   expect, it, iit, xit,
//   describe, ddescribe, xdescribe,
//   before, beforeEach, beforeEachProviders, withProviders,
//   async, inject,
//   testing
// } from "@angular/core/testing";
// Adapted from the official angular2 docs, https://angular.io/docs/ts/latest/guide/testing.html
let fullNameCalculations;
class TestStore {
    constructor() {
        this.firstName = "James";
        this.lastName = "Bond";
    }
    get fullName() {
        fullNameCalculations++;
        return `${this.firstName} ${this.lastName}`;
    }
}
__decorate([
    mobx_1.observable, 
    __metadata('design:type', Object)
], TestStore.prototype, "firstName", void 0);
__decorate([
    mobx_1.observable, 
    __metadata('design:type', Object)
], TestStore.prototype, "lastName", void 0);
__decorate([
    mobx_1.computed, 
    __metadata('design:type', Object)
], TestStore.prototype, "fullName", null);
let TestComponent = class TestComponent {
    constructor() {
        this.store = new TestStore();
        fullNameCalculations = 0;
    }
    setLastName() {
        this.store.lastName = 'Dean';
    }
};
TestComponent = __decorate([
    core_1.Component({
        template: `
    <div *mobxAutorun>
      <span id="fullname">{{store.fullName}}</span>
    </div>
    <button (click)="setLastName()">Set Name</button>
  `,
        changeDetection: core_1.ChangeDetectionStrategy.OnPush
    }), 
    __metadata('design:paramtypes', [])
], TestComponent);
let TestComponentSync = class TestComponentSync {
    constructor() {
        this.store = new TestStore();
        fullNameCalculations = 0;
    }
    setLastName() {
        this.store.lastName = 'Dean';
    }
};
TestComponentSync = __decorate([
    core_1.Component({
        template: `
    <div *mobxAutorunSync>
      <span id="fullname">{{store.fullName}}</span>
    </div>
    <button (click)="setLastName()">Set Name</button>
  `,
        changeDetection: core_1.ChangeDetectionStrategy.OnPush
    }), 
    __metadata('design:paramtypes', [])
], TestComponentSync);
let fullname, button, component;
describe('ng2Mobx', () => {
    testing_1.TestBed.initTestEnvironment(testing_2.BrowserDynamicTestingModule, testing_2.platformBrowserDynamicTesting());
    describe('mobxAutorun', () => {
        beforeEach((done) => {
            component = testing_1.TestBed
                .configureTestingModule({ declarations: [ng2_mobx_1.MobxAutorunDirective, TestComponent] })
                .createComponent(TestComponent);
            component.detectChanges(); // initial binding
            fullname = component.debugElement.query(platform_browser_1.By.css("#fullname"));
            button = component.debugElement.query(platform_browser_1.By.css("button"));
            setTimeout(done);
        });
        // color tests
        it("should have correct content", () => {
            expect(fullname.nativeElement.innerText).toEqual("James Bond");
            expect(fullNameCalculations).toEqual(1);
        });
        it("should recompute value once", (done) => {
            button.triggerEventHandler("click", null);
            setTimeout(() => {
                expect(fullname.nativeElement.innerText).toEqual("James Dean");
                expect(fullNameCalculations).toEqual(2);
                done();
            });
        });
    });
    describe('mobxAutorunSync', () => {
        beforeEach(() => {
            component = testing_1.TestBed
                .configureTestingModule({ declarations: [ng2_mobx_1.MobxAutorunSyncDirective, TestComponentSync] })
                .createComponent(TestComponentSync);
            component.detectChanges(); // initial binding
            fullname = component.debugElement.query(platform_browser_1.By.css("#fullname"));
            button = component.debugElement.query(platform_browser_1.By.css("button"));
        });
        // color tests
        it("should have correct content", () => {
            expect(fullname.nativeElement.innerText).toEqual("James Bond");
            expect(fullNameCalculations).toEqual(1);
        });
        it("should recompute value once", () => {
            button.triggerEventHandler("click", null);
            expect(fullname.nativeElement.innerText).toEqual("James Dean");
            expect(fullNameCalculations).toEqual(2);
        });
    });
});
//# sourceMappingURL=data:application/json;base64,