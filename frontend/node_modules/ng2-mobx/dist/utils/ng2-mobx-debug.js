"use strict";
var mobx_1 = require("mobx");
// function for turning debug on / off
window['ng2MobxDebug'] = function (value) {
    if (value)
        window['localStorage']['ng2-mobx-debug'] = true;
    else
        delete window['localStorage']['ng2-mobx-debug'];
};
function isDebugOn() {
    return window['localStorage'] && window['localStorage']['ng2-mobx-debug'];
}
mobx_1.spy(function (change) { return isDebugOn() && consoleLogChange(change, function () { return true; }); });
// Debugging element dependency tree
function ng2MobxDebug(view, renderer, observer) {
    if (!isDebugOn())
        return;
    var element = view.rootNodes[0];
    var debugElement = document.createElement('span');
    element.prepend(debugElement); // No prepend in Angular Renderer
    renderer.setElementStyle(debugElement, 'position', 'absolute');
    renderer.setElementStyle(debugElement, 'border', '1px dotted red');
    renderer.setElementStyle(debugElement, 'transform', "translateY(-25px)");
    renderer.setElementStyle(debugElement, 'cursor', 'pointer');
    renderer.setElementStyle(debugElement, 'z-index', '1000000');
    renderer.setElementStyle(debugElement, 'padding', '5px 10px');
    renderer.setElementStyle(debugElement, 'font-size', '14px');
    renderer.setElementStyle(debugElement, 'line-height', '14px');
    renderer.setElementStyle(debugElement, 'display', 'none');
    renderer.createText(debugElement, 'mobx deps');
    renderer.listen(element, 'mouseenter', function () {
        renderer.setElementStyle(debugElement, 'display', 'inline');
    });
    renderer.listen(element, 'mouseleave', function () {
        renderer.setElementStyle(debugElement, 'display', 'none');
    });
    renderer.listen(debugElement, 'click', function () {
        console.log(mobx_1.extras.getDependencyTree(observer));
    });
}
exports.ng2MobxDebug = ng2MobxDebug;
/////////////////////////////////////////////////////////
// console logging (copied from mobx-react)
var advicedToUseChrome = false;
var currentDepth = 0;
var isInsideSkippedGroup = false;
function consoleLogChange(change, filter) {
    if (advicedToUseChrome === false && typeof navigator !== 'undefined' && navigator.userAgent.indexOf('Chrome') === -1) {
        console.warn("The output of the MobX logger is optimized for Chrome");
        advicedToUseChrome = true;
    }
    var isGroupStart = change.spyReportStart === true;
    var isGroupEnd = change.spyReportEnd === true;
    var show;
    if (currentDepth === 0) {
        show = filter(change);
        if (isGroupStart && !show) {
            isInsideSkippedGroup = true;
        }
    }
    else if (isGroupEnd && isInsideSkippedGroup && currentDepth === 1) {
        show = false;
        isInsideSkippedGroup = false;
    }
    else {
        show = isInsideSkippedGroup !== true;
    }
    if (show && isGroupEnd) {
        groupEnd(change.time);
    }
    else if (show) {
        var logNext = isGroupStart ? group : log;
        switch (change.type) {
            case 'action':
                // name, target, arguments, fn
                logNext("%caction '%s' %s", 'color:dodgerblue', change.name, autoWrap("(", getNameForThis(change.target)));
                log(change.arguments);
                trace();
                break;
            case 'transaction':
                // name, target
                logNext("%ctransaction '%s' %s", 'color:gray', change.name, autoWrap("(", getNameForThis(change.target)));
                break;
            case 'scheduled-reaction':
                // object
                logNext("%cscheduled async reaction '%s'", 'color:#10a210', observableName(change.object));
                break;
            case 'reaction':
                // object, fn
                logNext("%creaction '%s'", 'color:#10a210', observableName(change.object));
                // dir({
                //     fn: change.fn
                // });
                trace();
                break;
            case 'compute':
                // object, target, fn
                group("%ccomputed '%s' %s", 'color:#10a210', observableName(change.object), autoWrap("(", getNameForThis(change.target)));
                // dir({
                //    fn: change.fn,
                //    target: change.target
                // });
                groupEnd();
                break;
            case 'error':
                // message
                logNext('%cerror: %s', 'color:tomato', change.message);
                trace();
                closeGroupsOnError();
                break;
            case 'update':
                // (array) object, index, newValue, oldValue
                // (map, obbject) object, name, newValue, oldValue
                // (value) object, newValue, oldValue
                if (mobx_1.isObservableArray(change.object)) {
                    logNext("updated '%s[%s]': %s (was: %s)", observableName(change.object), change.index, formatValue(change.newValue), formatValue(change.oldValue));
                }
                else if (mobx_1.isObservableObject(change.object)) {
                    logNext("updated '%s.%s': %s (was: %s)", observableName(change.object), change.name, formatValue(change.newValue), formatValue(change.oldValue));
                }
                else {
                    logNext("updated '%s': %s (was: %s)", observableName(change.object), change.name, formatValue(change.newValue), formatValue(change.oldValue));
                }
                dir({
                    newValue: change.newValue,
                    oldValue: change.oldValue
                });
                trace();
                break;
            case 'splice':
                // (array) object, index, added, removed, addedCount, removedCount
                logNext("spliced '%s': index %d, added %d, removed %d", observableName(change.object), change.index, change.addedCount, change.removedCount);
                dir({
                    added: change.added,
                    removed: change.removed
                });
                trace();
                break;
            case 'add':
                // (map, object) object, name, newValue
                logNext("set '%s.%s': %s", observableName(change.object), change.name, formatValue(change.newValue));
                dir({
                    newValue: change.newValue
                });
                trace();
                break;
            case 'delete':
                // (map) object, name, oldValue
                logNext("removed '%s.%s' (was %s)", observableName(change.object), change.name, formatValue(change.oldValue));
                dir({
                    oldValue: change.oldValue
                });
                trace();
                break;
            case 'create':
                // (value) object, newValue
                logNext("set '%s': %s", observableName(change.object), formatValue(change.newValue));
                dir({
                    newValue: change.newValue
                });
                trace();
                break;
            default:
                // generic fallback for future events
                logNext(change.type);
                dir(change);
                break;
        }
    }
    if (isGroupStart)
        currentDepth++;
    if (isGroupEnd)
        currentDepth--;
}
exports.consoleLogChange = consoleLogChange;
var consoleSupportsGroups = typeof console.groupCollapsed === "function";
var currentlyLoggedDepth = 0;
function group() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    // TODO: firefox does not support formatting in groupStart methods..
    consoleSupportsGroups ?
        console.groupCollapsed.apply(console, args) :
        console.log.apply(console, args);
    currentlyLoggedDepth++;
}
function groupEnd(time) {
    currentlyLoggedDepth--;
    if (typeof time === "number") {
        log("%ctotal time: %sms", "color:gray", time);
    }
    if (consoleSupportsGroups)
        console.groupEnd();
}
function log() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    console.log.apply(console, args);
}
function dir() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    console.dir.apply(console, args);
}
function trace() {
    // TODO: needs wrapping in firefox?
    console.trace("stack"); // TODO: use stacktrace.js or similar and strip off unrelevant stuff?
}
function closeGroupsOnError() {
    for (var i = 0, m = currentlyLoggedDepth; i < m; i++)
        groupEnd();
}
var closeToken = {
    "\"": "\"",
    "'": "'",
    "(": ")",
    "[": "]",
    "<": "]",
    "#": ""
};
function autoWrap(token, value) {
    if (!value)
        return "";
    return (token || "") + value + (closeToken[token] || "");
}
function observableName(object) {
    return mobx_1.extras.getDebugName(object);
}
function formatValue(value) {
    if (isPrimitive(value)) {
        if (typeof value === "string" && value.length > 100)
            return value.substr(0, 97) + "...";
        return value;
    }
    else
        return autoWrap("(", getNameForThis(value));
}
function getNameForThis(who) {
    if (who === null || who === undefined) {
        return "";
    }
    else if (who && typeof who === "object") {
        if (who && who.$mobx) {
            return who.$mobx.name;
        }
        else if (who.constructor) {
            return who.constructor.name || "object";
        }
    }
    return "" + typeof who;
}
function isPrimitive(value) {
    return value === null || value === undefined || typeof value === "string" || typeof value === "number" || typeof value === "boolean";
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmcyLW1vYngtZGVidWcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9saWIvdXRpbHMvbmcyLW1vYngtZGVidWcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLDZCQUEwRTtBQUUxRSxzQ0FBc0M7QUFDdEMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxHQUFHLFVBQUMsS0FBSztJQUM3QixFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUM7UUFBQyxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDM0QsSUFBSTtRQUFDLE9BQU8sTUFBTSxDQUFDLGNBQWMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLENBQUM7QUFDdkQsQ0FBQyxDQUFBO0FBRUQ7SUFDRSxNQUFNLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0FBQzVFLENBQUM7QUFFRCxVQUFHLENBQUMsVUFBQyxNQUFNLElBQUssT0FBQSxTQUFTLEVBQUUsSUFBSSxnQkFBZ0IsQ0FBQyxNQUFNLEVBQUUsY0FBTSxPQUFBLElBQUksRUFBSixDQUFJLENBQUMsRUFBbkQsQ0FBbUQsQ0FBQyxDQUFDO0FBRXJFLG9DQUFvQztBQUNwQyxzQkFBNkIsSUFBSSxFQUFFLFFBQVEsRUFBRSxRQUFRO0lBQ25ELEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUM7UUFBQyxNQUFNLENBQUM7SUFFekIsSUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVsQyxJQUFNLFlBQVksR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3BELE9BQU8sQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxpQ0FBaUM7SUFDaEUsUUFBUSxDQUFDLGVBQWUsQ0FBQyxZQUFZLEVBQUUsVUFBVSxFQUFD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d0IsR0FBRztJQUN2QixFQUFFLENBQUMsQ0FBQyxHQUFHLEtBQUssSUFBSSxJQUFJLEdBQUcsS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDO1FBQ3BDLE1BQU0sQ0FBQyxFQUFFLENBQUM7SUFDZCxDQUFDO0lBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsSUFBSSxPQUFPLEdBQUcsS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQzFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUNyQixNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUM7UUFDdEIsQ0FBQztRQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztZQUN6QixNQUFNLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxJQUFJLElBQUksUUFBUSxDQUFDO1FBQzVDLENBQUM7SUFDUCxDQUFDO0lBQ0QsTUFBTSxDQUFDLEtBQUcsT0FBTyxHQUFLLENBQUM7QUFDekIsQ0FBQztBQUVELHFCQUFxQixLQUFLO0lBQ3hCLE1BQU0sQ0FBQyxLQUFLLEtBQUssSUFBSSxJQUFJLEtBQUssS0FBSyxTQUFTLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsSUFBSSxPQUFPLEtBQUssS0FBSyxTQUFTLENBQUM7QUFDdkksQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGV4dHJhcywgc3B5LCBpc09ic2VydmFibGVBcnJheSwgaXNPYnNlcnZhYmxlT2JqZWN0IH0gZnJvbSAnbW9ieCc7XG5cbi8vIGZ1bmN0aW9uIGZvciB0dXJuaW5nIGRlYnVnIG9uIC8gb2ZmXG53aW5kb3dbJ25nMk1vYnhEZWJ1ZyddID0gKHZhbHVlKSA9PiB7XG4gIGlmICh2YWx1ZSkgd2luZG93Wydsb2NhbFN0b3JhZ2UnXVsnbmcyLW1vYngtZGVidWcnXSA9IHRydWU7XG4gIGVsc2UgZGVsZXRlIHdpbmRvd1snbG9jYWxTdG9yYWdlJ11bJ25nMi1tb2J4LWRlYnVnJ107XG59XG5cbmZ1bmN0aW9uIGlzRGVidWdPbigpIHtcbiAgcmV0dXJuIHdpbmRvd1snbG9jYWxTdG9yYWdlJ10gJiYgd2luZG93Wydsb2NhbFN0b3JhZ2UnXVsnbmcyLW1vYngtZGVidWcnXTtcbn1cblxuc3B5KChjaGFuZ2UpID0+IGlzRGVidWdPbigpICYmIGNvbnNvbGVMb2dDaGFuZ2UoY2hhbmdlLCAoKSA9PiB0cnVlKSk7XG5cbi8vIERlYnVnZ2luZyBlbGVtZW50IGRlcGVuZGVuY3kgdHJlZVxuZXhwb3J0IGZ1bmN0aW9uIG5nMk1vYnhEZWJ1Zyh2aWV3LCByZW5kZXJlciwgb2JzZXJ2ZXIpIHtcbiAgaWYgKCFpc0RlYnVnT24oKSkgcmV0dXJuO1xuXG4gIGNvbnN0IGVsZW1lbnQgPSB2aWV3LnJvb3ROb2Rlc1swXTtcblxuICBjb25zdCBkZWJ1Z0VsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7XG4gIGVsZW1lbnQucHJlcGVuZChkZWJ1Z0VsZW1lbnQpOyAvLyBObyBwcmVwZW5kIGluIEFuZ3VsYXIgUmVuZGVyZXJcbiAgcmVuZGVyZXIuc2V0RWxlbWVudFN0eWxlKGRlYnVnRWxlbWVudCwgJ3Bvc2l0aW9uJywnYWJzb2x1dGUnKTtcbiAgcmVuZGVyZXIuc2V0RWxlbWVudFN0eWxlKGRlYnVnRWxlbWVudCwgJ2JvcmRlcicsJzFweCBkb3R0ZWQgcmVkJyk7XG4gIHJlbmRlcmVyLnNldEVsZW1lbnRTdHlsZShkZWJ1Z0VsZW1lbnQsICd0cmFuc2Zvcm0nLGB0cmFuc2xhdGVZKC0yNXB4KWApO1xuICByZW5kZXJlci5zZXRFbGVtZW50U3R5bGUoZGVidWdFbGVtZW50LCAnY3Vyc29yJywgJ3BvaW50ZXInKTtcbiAgcmVuZGVyZXIuc2V0RWxlbWVudFN0eWxlKGRlYnVnRWxlbWVudCwgJ3otaW5kZXgnLCAnMTAwMDAwMCcpO1xuICByZW5kZXJlci5zZXRFbGVtZW50U3R5bGUoZGVidWdFbGVtZW50LCAncGFkZGluZycsICc1cHggMTBweCcpO1xuICByZW5kZXJlci5zZXRFbGVtZW50U3R5bGUoZGVidWdFbGVtZW50LCAnZm9udC1zaXplJywgJzE0cHgnKTtcbiAgcmVuZGVyZXIuc2V0RWxlbWVudFN0eWxlKGRlYnVnRWxlbWVudCwgJ2xpbmUtaGVpZ2h0JywgJzE0cHgnKTtcbiAgcmVuZGVyZXIuc2V0RWxlbWVudFN0eWxlKGRlYnVnRWxlbWVudCwgJ2Rpc3BsYXknLCAnbm9uZScpO1xuICByZW5kZXJlci5jcmVhdGVUZXh0KGRlYnVnRWxlbWVudCwgJ21vYnggZGVwcycpO1xuXG4gIHJlbmRlcmVyLmxpc3RlbihlbGVtZW50LCAnbW91c2VlbnRlcicsICgpID0+IHtcbiAgICByZW5kZXJlci5zZXRFbGVtZW50U3R5bGUoZGVidWdFbGVtZW50LCAnZGlzcGxheScsICdpbmxpbmUnKTtcbiAgfSk7XG4gIHJlbmRlcmVyLmxpc3RlbihlbGVtZW50LCAnbW91c2VsZWF2ZScsICgpID0+IHtcbiAgICByZW5kZXJlci5zZXRFbGVtZW50U3R5bGUoZGVidWdFbGVtZW50LCAnZGlzcGxheScsICdub25lJyk7XG4gIH0pO1xuXG4gIHJlbmRlcmVyLmxpc3RlbihkZWJ1Z0VsZW1lbnQsICdjbGljaycsICgpID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKGV4dHJhcy5nZXREZXBlbmRlbmN5VHJlZShvYnNlcnZlcikpO1xuICB9KTtcbn1cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBjb25zb2xlIGxvZ2dpbmcgKGNvcGllZCBmcm9tIG1vYngtcmVhY3QpXG5sZXQgYWR2aWNlZFRvVXNlQ2hyb21lID0gZmFsc2U7XG5cbmxldCBjdXJyZW50RGVwdGggPSAwO1xubGV0IGlzSW5zaWRlU2tpcHBlZEdyb3VwID0gZmFsc2U7XG5cbmV4cG9ydCBmdW5jdGlvbiBjb25zb2xlTG9nQ2hhbmdlKGNoYW5nZSwgZmlsdGVyKSB7XG5cbiAgICBpZiAoYWR2aWNlZFRvVXNlQ2hyb21lID09PSBmYWxzZSAmJiB0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0Nocm9tZScpID09PSAtMSkge1xuICAgICAgICBjb25zb2xlLndhcm4oXCJUaGUgb3V0cHV0IG9mIHRoZSBNb2JYIGxvZ2dlciBpcyBvcHRpbWl6ZWQgZm9yIENocm9tZVwiKTtcbiAgICAgICAgYWR2aWNlZFRvVXNlQ2hyb21lID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBjb25zdCBpc0dyb3VwU3RhcnQgPSBjaGFuZ2Uuc3B5UmVwb3J0U3RhcnQgPT09IHRydWU7XG4gICAgY29uc3QgaXNHcm91cEVuZCA9IGNoYW5nZS5zcHlSZXBvcnRFbmQgPT09IHRydWU7XG5cbiAgICBsZXQgc2hvdztcbiAgICBpZiAoY3VycmVudERlcHRoID09PSAwKSB7XG4gICAgICAgIHNob3cgPSBmaWx0ZXIoY2hhbmdlKTtcbiAgICAgICAgaWYgKGlzR3JvdXBTdGFydCAmJiAhc2hvdykgeyBpc0luc2lkZVNraXBwZWRHcm91cCA9IHRydWU7IH1cbiAgICB9IGVsc2UgaWYgKGlzR3JvdXBFbmQgJiYgaXNJbnNpZGVTa2lwcGVkR3JvdXAgJiYgY3VycmVudERlcHRoID09PSAxKSB7XG4gICAgICAgIHNob3cgPSBmYWxzZTtcbiAgICAgICAgaXNJbnNpZGVTa2lwcGVkR3JvdXAgPSBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBzaG93ID0gaXNJbnNpZGVTa2lwcGVkR3JvdXAgIT09IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKHNob3cgJiYgaXNHcm91cEVuZCkge1xuICAgICAgICBncm91cEVuZChjaGFuZ2UudGltZSk7XG4gICAgfSBlbHNlIGlmIChzaG93KSB7XG4gICAgICAgIGNvbnN0IGxvZ05leHQ6YW55ID0gaXNHcm91cFN0YXJ0ID8gZ3JvdXAgOiBsb2c7XG4gICAgICAgIHN3aXRjaCAoY2hhbmdlLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ2FjdGlvbic6XG4gICAgICAgICAgICAgICAgLy8gbmFtZSwgdGFyZ2V0LCBhcmd1bWVudHMsIGZuXG4gICAgICAgICAgICAgICAgbG9nTmV4dChgJWNhY3Rpb24gJyVzJyAlc2AsICdjb2xvcjpkb2RnZXJibHVlJywgY2hhbmdlLm5hbWUsIGF1dG9XcmFwKFwiKFwiLCBnZXROYW1lRm9yVGhpcyhjaGFuZ2UudGFyZ2V0KSkpO1xuICAgICAgICAgICAgICAgIGxvZyhjaGFuZ2UuYXJndW1lbnRzKTtcbiAgICAgICAgICAgICAgICB0cmFjZSgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAndHJhbnNhY3Rpb24nOlxuICAgICAgICAgICAgICAgIC8vIG5hbWUsIHRhcmdldFxuICAgICAgICAgICAgICAgIGxvZ05leHQoYCVjdHJhbnNhY3Rpb24gJyVzJyAlc2AsICdjb2xvcjpncmF5JywgY2hhbmdlLm5hbWUsIGF1dG9XcmFwKFwiKFwiLCBnZXROYW1lRm9yVGhpcyhjaGFuZ2UudGFyZ2V0KSkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnc2NoZWR1bGVkLXJlYWN0aW9uJzpcbiAgICAgICAgICAgICAgICAvLyBvYmplY3RcbiAgICAgICAgICAgICAgICBsb2dOZXh0KGAlY3NjaGVkdWxlZCBhc3luYyByZWFjdGlvbiAnJXMnYCwgJ2NvbG9yOiMxMGEyMTAnLCBvYnNlcnZhYmxlTmFtZShjaGFuZ2Uub2JqZWN0KSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdyZWFjdGlvbic6XG4gICAgICAgICAgICAgICAgLy8gb2JqZWN0LCBmblxuICAgICAgICAgICAgICAgIGxvZ05leHQoYCVjcmVhY3Rpb24gJyVzJ2AsICdjb2xvcjojMTBhMjEwJywgb2JzZXJ2YWJsZU5hbWUoY2hhbmdlLm9iamVjdCkpO1xuICAgICAgICAgICAgICAgIC8vIGRpcih7XG4gICAgICAgICAgICAgICAgLy8gICAgIGZuOiBjaGFuZ2UuZm5cbiAgICAgICAgICAgICAgICAvLyB9KTtcbiAgICAgICAgICAgICAgICB0cmFjZSgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnY29tcHV0ZSc6XG4gICAgICAgICAgICAgICAgLy8gb2JqZWN0LCB0YXJnZXQsIGZuXG4gICAgICAgICAgICAgICAgZ3JvdXAoYCVjY29tcHV0ZWQgJyVzJyAlc2AsICdjb2xvcjojMTBhMjEwJywgb2JzZXJ2YWJsZU5hbWUoY2hhbmdlLm9iamVjdCksIGF1dG9XcmFwKFwiKFwiLCBnZXROYW1lRm9yVGhpcyhjaGFuZ2UudGFyZ2V0KSkpO1xuICAgICAgICAgICAgICAgIC8vIGRpcih7XG4gICAgICAgICAgICAgICAgLy8gICAgZm46IGNoYW5nZS5mbixcbiAgICAgICAgICAgICAgICAvLyAgICB0YXJnZXQ6IGNoYW5nZS50YXJnZXRcbiAgICAgICAgICAgICAgICAvLyB9KTtcbiAgICAgICAgICAgICAgICBncm91cEVuZCgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnZXJyb3InOlxuICAgICAgICAgICAgICAgIC8vIG1lc3NhZ2VcbiAgICAgICAgICAgICAgICBsb2dOZXh0KCclY2Vycm9yOiAlcycsICdjb2xvcjp0b21hdG8nLCBjaGFuZ2UubWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgdHJhY2UoKTtcbiAgICAgICAgICAgICAgICBjbG9zZUdyb3Vwc09uRXJyb3IoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3VwZGF0ZSc6XG4gICAgICAgICAgICAgICAgLy8gKGFycmF5KSBvYmplY3QsIGluZGV4LCBuZXdWYWx1ZSwgb2xkVmFsdWVcbiAgICAgICAgICAgICAgICAvLyAobWFwLCBvYmJqZWN0KSBvYmplY3QsIG5hbWUsIG5ld1ZhbHVlLCBvbGRWYWx1ZVxuICAgICAgICAgICAgICAgIC8vICh2YWx1ZSkgb2JqZWN0LCBuZXdWYWx1ZSwgb2xkVmFsdWVcbiAgICAgICAgICAgICAgICBpZiAoaXNPYnNlcnZhYmxlQXJyYXkoY2hhbmdlLm9iamVjdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9nTmV4dChcInVwZGF0ZWQgJyVzWyVzXSc6ICVzICh3YXM6ICVzKVwiLCBvYnNlcnZhYmxlTmFtZShjaGFuZ2Uub2JqZWN0KSwgY2hhbmdlLmluZGV4LCBmb3JtYXRWYWx1ZShjaGFuZ2UubmV3VmFsdWUpLCBmb3JtYXRWYWx1ZShjaGFuZ2Uub2xkVmFsdWUpKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGlzT2JzZXJ2YWJsZU9iamVjdChjaGFuZ2Uub2JqZWN0KSkge1xuICAgICAgICAgICAgICAgICAgICBsb2dOZXh0KFwidXBkYXRlZCAnJXMuJXMnOiAlcyAod2FzOiAlcylcIiwgb2JzZXJ2YWJsZU5hbWUoY2hhbmdlLm9iamVjdCksIGNoYW5nZS5uYW1lLCBmb3JtYXRWYWx1ZShjaGFuZ2UubmV3VmFsdWUpLCBmb3JtYXRWYWx1ZShjaGFuZ2Uub2xkVmFsdWUpKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBsb2dOZXh0KFwidXBkYXRlZCAnJXMnOiAlcyAod2FzOiAlcylcIiwgb2JzZXJ2YWJsZU5hbWUoY2hhbmdlLm9iamVjdCksIGNoYW5nZS5uYW1lLCBmb3JtYXRWYWx1ZShjaGFuZ2UubmV3VmFsdWUpLCBmb3JtYXRWYWx1ZShjaGFuZ2Uub2xkVmFsdWUpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZGlyKHtcbiAgICAgICAgICAgICAgICAgICAgbmV3VmFsdWU6IGNoYW5nZS5uZXdWYWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgb2xkVmFsdWU6IGNoYW5nZS5vbGRWYWx1ZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRyYWNlKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdzcGxpY2UnOlxuICAgICAgICAgICAgICAgIC8vIChhcnJheSkgb2JqZWN0LCBpbmRleCwgYWRkZWQsIHJlbW92ZWQsIGFkZGVkQ291bnQsIHJlbW92ZWRDb3VudFxuICAgICAgICAgICAgICAgIGxvZ05leHQoXCJzcGxpY2VkICclcyc6IGluZGV4ICVkLCBhZGRlZCAlZCwgcmVtb3ZlZCAlZFwiLCBvYnNlcnZhYmxlTmFtZShjaGFuZ2Uub2JqZWN0KSwgY2hhbmdlLmluZGV4LCBjaGFuZ2UuYWRkZWRDb3VudCwgY2hhbmdlLnJlbW92ZWRDb3VudCk7XG4gICAgICAgICAgICAgICAgZGlyKHtcbiAgICAgICAgICAgICAgICAgICAgYWRkZWQ6IGNoYW5nZS5hZGRlZCxcbiAgICAgICAgICAgICAgICAgICAgcmVtb3ZlZDogY2hhbmdlLnJlbW92ZWRcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0cmFjZSgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnYWRkJzpcbiAgICAgICAgICAgICAgICAvLyAobWFwLCBvYmplY3QpIG9iamVjdCwgbmFtZSwgbmV3VmFsdWVcbiAgICAgICAgICAgICAgICBsb2dOZXh0KFwic2V0ICclcy4lcyc6ICVzXCIsIG9ic2VydmFibGVOYW1lKGNoYW5nZS5vYmplY3QpLCBjaGFuZ2UubmFtZSwgZm9ybWF0VmFsdWUoY2hhbmdlLm5ld1ZhbHVlKSk7XG4gICAgICAgICAgICAgICAgZGlyKHtcbiAgICAgICAgICAgICAgICAgICAgbmV3VmFsdWU6IGNoYW5nZS5uZXdWYWx1ZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRyYWNlKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdkZWxldGUnOlxuICAgICAgICAgICAgICAgIC8vIChtYXApIG9iamVjdCwgbmFtZSwgb2xkVmFsdWVcbiAgICAgICAgICAgICAgICBsb2dOZXh0KFwicmVtb3ZlZCAnJXMuJXMnICh3YXMgJXMpXCIsIG9ic2VydmFibGVOYW1lKGNoYW5nZS5vYmplY3QpLCBjaGFuZ2UubmFtZSwgZm9ybWF0VmFsdWUoY2hhbmdlLm9sZFZhbHVlKSk7XG4gICAgICAgICAgICAgICAgZGlyKHtcbiAgICAgICAgICAgICAgICAgICAgb2xkVmFsdWU6IGNoYW5nZS5vbGRWYWx1ZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRyYWNlKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdjcmVhdGUnOlxuICAgICAgICAgICAgICAgIC8vICh2YWx1ZSkgb2JqZWN0LCBuZXdWYWx1ZVxuICAgICAgICAgICAgICAgIGxvZ05leHQoXCJzZXQgJyVzJzogJXNcIiwgb2JzZXJ2YWJsZU5hbWUoY2hhbmdlLm9iamVjdCksIGZvcm1hdFZhbHVlKGNoYW5nZS5uZXdWYWx1ZSkpO1xuICAgICAgICAgICAgICAgIGRpcih7XG4gICAgICAgICAgICAgICAgICAgIG5ld1ZhbHVlOiBjaGFuZ2UubmV3VmFsdWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0cmFjZSgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAvLyBnZW5lcmljIGZhbGxiYWNrIGZvciBmdXR1cmUgZXZlbnRzXG4gICAgICAgICAgICAgICAgbG9nTmV4dChjaGFuZ2UudHlwZSk7XG4gICAgICAgICAgICAgICAgZGlyKGNoYW5nZSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaXNHcm91cFN0YXJ0KSBjdXJyZW50RGVwdGgrKztcbiAgICBpZiAoaXNHcm91cEVuZCkgY3VycmVudERlcHRoLS07XG59XG5cbmNvbnN0IGNvbnNvbGVTdXBwb3J0c0dyb3VwcyA9IHR5cGVvZiBjb25zb2xlLmdyb3VwQ29sbGFwc2VkID09PSBcImZ1bmN0aW9uXCI7XG5sZXQgY3VycmVudGx5TG9nZ2VkRGVwdGggPSAwO1xuXG5mdW5jdGlvbiBncm91cCguLi5hcmdzKSB7XG4gICAgLy8gVE9ETzogZmlyZWZveCBkb2VzIG5vdCBzdXBwb3J0IGZvcm1hdHRpbmcgaW4gZ3JvdXBTdGFydCBtZXRob2RzLi5cbiAgICBjb25zb2xlU3VwcG9ydHNHcm91cHMgP1xuICAgICAgY29uc29sZS5ncm91cENvbGxhcHNlZC5hcHBseShjb25zb2xlLCBhcmdzKSA6XG4gICAgICBjb25zb2xlLmxvZy5hcHBseShjb25zb2xlLCBhcmdzKTtcbiAgICBjdXJyZW50bHlMb2dnZWREZXB0aCsrO1xufVxuXG5mdW5jdGlvbiBncm91cEVuZCh0aW1lPykge1xuICAgIGN1cnJlbnRseUxvZ2dlZERlcHRoLS07XG4gICAgaWYgKHR5cGVvZiB0aW1lID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgIGxvZyhcIiVjdG90YWwgdGltZTogJXNtc1wiLCBcImNvbG9yOmdyYXlcIiwgdGltZSk7XG4gICAgfVxuICAgIGlmIChjb25zb2xlU3VwcG9ydHNHcm91cHMpXG4gICAgICAgIGNvbnNvbGUuZ3JvdXBFbmQoKTtcbn1cblxuZnVuY3Rpb24gbG9nKC4uLmFyZ3MpIHtcbiAgICBjb25zb2xlLmxvZy5hcHBseShjb25zb2xlLCBhcmdzKTtcbn1cblxuZnVuY3Rpb24gZGlyKC4uLmFyZ3MpIHtcbiAgICBjb25zb2xlLmRpci5hcHBseShjb25zb2xlLCBhcmdzKTtcbn1cblxuZnVuY3Rpb24gdHJhY2UoKSB7XG4gICAgLy8gVE9ETzogbmVlZHMgd3JhcHBpbmcgaW4gZmlyZWZveD9cbiAgICBjb25zb2xlLnRyYWNlKFwic3RhY2tcIik7IC8vIFRPRE86IHVzZSBzdGFja3RyYWNlLmpzIG9yIHNpbWlsYXIgYW5kIHN0cmlwIG9mZiB1bnJlbGV2YW50IHN0dWZmP1xufVxuXG5mdW5jdGlvbiBjbG9zZUdyb3Vwc09uRXJyb3IoKSB7XG4gICAgZm9yIChsZXQgaSA9IDAsIG0gPSBjdXJyZW50bHlMb2dnZWREZXB0aDsgaSA8IG07IGkrKylcbiAgICAgICAgZ3JvdXBFbmQoKTtcbn1cblxuY29uc3QgY2xvc2VUb2tlbiA9IHtcbiAgICBcIlxcXCJcIiA6IFwiXFxcIlwiLFxuICAgIFwiJ1wiIDogXCInXCIsXG4gICAgXCIoXCIgOiBcIilcIixcbiAgICBcIltcIiA6IFwiXVwiLFxuICAgIFwiPFwiIDogXCJdXCIsXG4gICAgXCIjXCIgOiBcIlwiXG59O1xuXG5mdW5jdGlvbiBhdXRvV3JhcCh0b2tlbiwgdmFsdWUpIHtcbiAgICBpZiAoIXZhbHVlKVxuICAgICAgICByZXR1cm4gXCJcIjtcbiAgICByZXR1cm4gKHRva2VuIHx8IFwiXCIpICsgdmFsdWUgKyAoY2xvc2VUb2tlblt0b2tlbl0gfHwgXCJcIik7XG59XG5cbmZ1bmN0aW9uIG9ic2VydmFibGVOYW1lKG9iamVjdCkge1xuICAgIHJldHVybiBleHRyYXMuZ2V0RGVidWdOYW1lKG9iamVjdCk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFZhbHVlKHZhbHVlKSB7XG4gICAgaWYgKGlzUHJpbWl0aXZlKHZhbHVlKSkge1xuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmIHZhbHVlLmxlbmd0aCA+IDEwMClcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZS5zdWJzdHIoMCwgOTcpICsgXCIuLi5cIjtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0gZWxzZVxuICAgICAgICByZXR1cm4gYXV0b1dyYXAoXCIoXCIsIGdldE5hbWVGb3JUaGlzKHZhbHVlKSk7XG59XG5cbmZ1bmN0aW9uIGdldE5hbWVGb3JUaGlzKHdobykge1xuICAgIGlmICh3aG8gPT09IG51bGwgfHwgd2hvID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgfSBlbHNlIGlmICh3aG8gJiYgdHlwZW9mIHdobyA9PT0gXCJvYmplY3RcIikge1xuICAgICAgaWYgKHdobyAmJiB3aG8uJG1vYngpIHtcbiAgICAgICAgcmV0dXJuIHdoby4kbW9ieC5uYW1lO1xuICAgICAgICB9IGVsc2UgaWYgKHdoby5jb25zdHJ1Y3Rvcikge1xuICAgICAgICAgICAgcmV0dXJuIHdoby5jb25zdHJ1Y3Rvci5uYW1lIHx8IFwib2JqZWN0XCI7XG4gICAgICAgIH1cbiAgfVxuICByZXR1cm4gYCR7dHlwZW9mIHdob31gO1xufVxuXG5mdW5jdGlvbiBpc1ByaW1pdGl2ZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCB8fCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgfHwgdHlwZW9mIHZhbHVlID09PSBcIm51bWJlclwiIHx8IHR5cGVvZiB2YWx1ZSA9PT0gXCJib29sZWFuXCI7XG59XG4iXX0=