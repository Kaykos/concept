var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Component, Input, ViewEncapsulation } from '@angular/core';
import { TreeNode } from '../models/tree-node.model';
var TreeNodeChildrenComponent = (function () {
    function TreeNodeChildrenComponent() {
    }
    return TreeNodeChildrenComponent;
}());
__decorate([
    Input(),
    __metadata("design:type", TreeNode)
], TreeNodeChildrenComponent.prototype, "node", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], TreeNodeChildrenComponent.prototype, "templates", void 0);
TreeNodeChildrenComponent = __decorate([
    Component({
        selector: 'TreeNodeChildren',
        encapsulation: ViewEncapsulation.None,
        styles: [
            '.tree-children.tree-children-no-padding { padding-left: 0 }',
            '.tree-children { padding-left: 20px }'
        ],
        template: "\n    <div [class.tree-children]=\"true\"\n         [class.tree-children-no-padding]=\"node.options.levelPadding\"\n         *ngIf=\"node.isExpanded\">\n      <div *ngIf=\"node.children\">\n        <TreeNode\n          *ngFor=\"let node of node.children; let i = index\"\n          [node]=\"node\"\n          [index]=\"i\"\n          [templates]=\"templates\">\n        </TreeNode>\n      </div>\n      <LoadingComponent\n        [style.padding-left]=\"node.getNodePadding()\"\n        class=\"tree-node-loading\"\n        *ngIf=\"!node.children\"\n        [template]=\"templates.loadingTemplate\"\n      ></LoadingComponent>\n    </div>\n  "
    })
], TreeNodeChildrenComponent);
export { TreeNodeChildrenComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS1ub2RlLWNoaWxkcmVuLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9jb21wb25lbnRzL3RyZWUtbm9kZS1jaGlsZHJlbi5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDcEUsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBOEJyRCxJQUFhLHlCQUF5QjtJQUF0QztJQUdBLENBQUM7SUFBRCxnQ0FBQztBQUFELENBQUMsQUFIRCxJQUdDO0FBRlU7SUFBUixLQUFLLEVBQUU7OEJBQU8sUUFBUTt1REFBQztBQUNmO0lBQVIsS0FBSyxFQUFFOzs0REFBZ0I7QUFGYix5QkFBeUI7SUE1QnJDLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSxrQkFBa0I7UUFDNUIsYUFBYSxFQUFFLGlCQUFpQixDQUFDLElBQUk7UUFDckMsTUFBTSxFQUFFO1lBQ04sNkRBQTZEO1lBQzdELHVDQUF1QztTQUN4QztRQUNELFFBQVEsRUFBRSxtb0JBbUJUO0tBQ0YsQ0FBQztHQUNXLHlCQUF5QixDQUdyQztTQUhZLHlCQUF5QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgSW5wdXQsIFZpZXdFbmNhcHN1bGF0aW9uIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBUcmVlTm9kZSB9IGZyb20gJy4uL21vZGVscy90cmVlLW5vZGUubW9kZWwnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdUcmVlTm9kZUNoaWxkcmVuJyxcbiAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcbiAgc3R5bGVzOiBbXG4gICAgJy50cmVlLWNoaWxkcmVuLnRyZWUtY2hpbGRyZW4tbm8tcGFkZGluZyB7IHBhZGRpbmctbGVmdDogMCB9JyxcbiAgICAnLnRyZWUtY2hpbGRyZW4geyBwYWRkaW5nLWxlZnQ6IDIwcHggfSdcbiAgXSxcbiAgdGVtcGxhdGU6IGBcbiAgICA8ZGl2IFtjbGFzcy50cmVlLWNoaWxkcmVuXT1cInRydWVcIlxuICAgICAgICAgW2NsYXNzLnRyZWUtY2hpbGRyZW4tbm8tcGFkZGluZ109XCJub2RlLm9wdGlvbnMubGV2ZWxQYWRkaW5nXCJcbiAgICAgICAgICpuZ0lmPVwibm9kZS5pc0V4cGFuZGVkXCI+XG4gICAgICA8ZGl2ICpuZ0lmPVwibm9kZS5jaGlsZHJlblwiPlxuICAgICAgICA8VHJlZU5vZGVcbiAgICAgICAgICAqbmdGb3I9XCJsZXQgbm9kZSBvZiBub2RlLmNoaWxkcmVuOyBsZXQgaSA9IGluZGV4XCJcbiAgICAgICAgICBbbm9kZV09XCJub2RlXCJcbiAgICAgICAgICBbaW5kZXhdPVwiaVwiXG4gICAgICAgICAgW3RlbXBsYXRlc109XCJ0ZW1wbGF0ZXNcIj5cbiAgICAgICAgPC9UcmVlTm9kZT5cbiAgICAgIDwvZGl2PlxuICAgICAgPExvYWRpbmdDb21wb25lbnRcbiAgICAgICAgW3N0eWxlLnBhZGRpbmctbGVmdF09XCJub2RlLmdldE5vZGVQYWRkaW5nKClcIlxuICAgICAgICBjbGFzcz1cInRyZWUtbm9kZS1sb2FkaW5nXCJcbiAgICAgICAgKm5nSWY9XCIhbm9kZS5jaGlsZHJlblwiXG4gICAgICAgIFt0ZW1wbGF0ZV09XCJ0ZW1wbGF0ZXMubG9hZGluZ1RlbXBsYXRlXCJcbiAgICAgID48L0xvYWRpbmdDb21wb25lbnQ+XG4gICAgPC9kaXY+XG4gIGBcbn0pXG5leHBvcnQgY2xhc3MgVHJlZU5vZGVDaGlsZHJlbkNvbXBvbmVudCB7XG4gIEBJbnB1dCgpIG5vZGU6IFRyZWVOb2RlO1xuICBASW5wdXQoKSB0ZW1wbGF0ZXM6IGFueTtcbn1cblxuaW50ZXJmYWNlIERlY29yYXRvckludm9jYXRpb24ge1xuICB0eXBlOiBGdW5jdGlvbjtcbiAgYXJncz86IGFueVtdO1xufVxuIl19